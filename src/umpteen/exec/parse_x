use crate::{
    error::ParseError,
    repr::{
        ast::{
            expr::Expr,
            ops::{Binary, Unary},
            stmt::Stmt,
        },
        token::{Token, TokenType},
        value::Value,
    },
};

pub enum AstNode<'a> {
    Stmt(Stmt<'a>),
    Expr(Expr<'a>),
}

pub type Ast<'a> = Vec<Stmt<'a>>;

pub struct Parser<'p> {
    tokens: Vec<Token<'p>>,
    index: usize,
}

impl<'p> Parser<'p> {
    pub fn new(tokens: Vec<Token<'p>>) -> Self {
        Parser { tokens, index: 0 }
    }

    pub fn parse(&mut self) -> Result<Ast<'p>, ParseError> {
        let mut ast = vec![];
        loop {
            if self.index == self.tokens.len() {
                break;
            }
            let stmt = self.statement()?;
            ast.push(stmt);
        }

        ast.push(Stmt::Exit);

        #[cfg(debug_assertions)]
        dbg!(&ast);

        Ok(ast)
    }

    fn statement(&mut self) -> Result<Stmt<'p>, ParseError> {
        let token = self.consume_or(ParseError::ExpectedStatement)?;

        let stmt = match token.kind {
            TokenType::Print => {
                let expr = self.expression()?;
                Stmt::Print(expr)
            }

            // TokenType::Let => {
            //     let name = self.consume_if(TokenType::Identifier)?.lexeme;

            //     if self.consume_if(TokenType::Equal).is_ok() {
            //         let expr = Box::new(self.expression()?);
            //         Stmt::Declare(name, Some(*expr))
            //     } else {
            //         Stmt::Declare(name, None)
            //     }
            // }

            // kind => Err(ParseError::UnexpectedToken(kind))?,
            _ => Stmt::Expr(self.expression()?),
        };
        self.consume_if(TokenType::Semicolon)?;
        Ok(stmt)
    }

    fn expression(&mut self) -> Result<Expr<'p>, ParseError> {
        self.equality()
    }

    fn equality(&mut self) -> Result<Expr<'p>, ParseError> {
        let mut expr = self.comparison()?;

        expr = loop {
            let op = match self.peek() {
                TokenType::BangEqual => Binary::Inequality,
                TokenType::EqualEqual => Binary::Equality,

                _ => break expr,
            };
            self.consume()?;
            expr = Expr::BinOp {
                left: Box::new(expr),
                right: Box::new(self.comparison()?),
                op,
            }
        };

        Ok(expr)
    }

    fn comparison(&mut self) -> Result<Expr<'p>, ParseError> {
        let mut expr = self.term()?;

        expr = loop {
            let op = match self.peek() {
                TokenType::Greater => Binary::GreaterThan,
                TokenType::GreaterEqual => Binary::GreaterOrEqual,
                TokenType::Less => Binary::LessThan,
                TokenType::LessEqual => Binary::LessOrEqual,

                _ => break expr,
            };
            self.consume()?;
            expr = Expr::BinOp {
                left: Box::new(expr),
                right: Box::new(self.term()?),
                op,
            }
        };

        Ok(expr)
    }

    fn term(&mut self) -> Result<Expr<'p>, ParseError> {
        let mut expr = self.factor()?;

        expr = loop {
            let op = match self.peek() {
                TokenType::Plus => Binary::Add,
                TokenType::Minus => Binary::Subtract,

                _ => break expr,
            };
            self.consume()?;
            expr = Expr::BinOp {
                left: Box::new(expr),
                right: Box::new(self.factor()?),
                op,
            }
        };

        Ok(expr)
    }

    fn factor(&mut self) -> Result<Expr<'p>, ParseError> {
        let mut expr = self.unary()?;

        expr = loop {
            let op = match self.peek() {
                TokenType::Asterisk => Binary::Multiply,
                TokenType::Slash => Binary::Divide,
                TokenType::Percent => Binary::Modulo,

                _ => break expr,
            };
            self.consume()?;
            expr = Expr::BinOp {
                left: Box::new(expr),
                right: Box::new(self.unary()?),
                op,
            }
        };

        Ok(expr)
    }

    fn unary(&mut self) -> Result<Expr<'p>, ParseError> {
        let expr = match self.peek() {
            TokenType::Bang => Expr::UnOp {
                expr: Box::new(self.unary()?),
                op: Unary::Not,
            },
            TokenType::Minus => Expr::UnOp {
                expr: Box::new(self.unary()?),
                op: Unary::Negate,
            },

            _ => self.primary()?,
        };

        self.consume()?;

        Ok(expr)
    }

    fn primary(&mut self) -> Result<Expr<'p>, ParseError> {
        let kind = self.peek(); //_or(ParseError::ExpectedExpression)?;
        let expr = match kind {
            TokenType::Empty => Expr::Literal(Value::Empty),
            TokenType::True => Expr::Literal(Value::Boolean(true)),
            TokenType::False => Expr::Literal(Value::Boolean(false)),
            TokenType::Number => {
                let num = self.consume()?.lexeme.parse()?;
                Expr::Literal(Value::Number(num))
            }
            // TokenType::String => {
            //     let str = Box::new(tk.lexeme.to_string());
            //     Expr::Literal(Value::String(str))
            // }
            // TokenType::Identifier => Expr::Binding { name: tk.lexeme },

            _ => self.expression()?,
        };
        Ok(expr)
    }

    fn consume(&mut self) -> Result<Token<'p>, ParseError> {
        if let Some(tk) = self.tokens.get(self.index) {
            self.index += 1;
            Ok(*tk)
        } else {
            Err(ParseError::UnexpectedEof)
        }
    }

    fn consume_or(&mut self, err: ParseError) -> Result<Token<'p>, ParseError> {
        self.consume().map_err(|_| err)
    }

    fn consume_if(&mut self, kind: TokenType) -> Result<Token<'p>, ParseError> {
        if self.peek() == kind {
            self.consume()
        } else {
            Err(ParseError::ExpectedToken(kind))
        }
    }

    fn peek(&self) -> TokenType {
        self.tokens[self.index].kind
    }

    // fn check(&self, kind: TokenType) -> bool {
    //     self.peek().is_ok_and(|x| x == kind)
    // }
}
